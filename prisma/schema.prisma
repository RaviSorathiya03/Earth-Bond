// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id          String      @id @default(uuid())
  firstName   String 
  lastName    String     
  email       String      @unique
  bio         String?
  profilePic  String?
  follower    Followers[] @relation("followers")
  following   Followers[] @relation("followings")
  user1       Chat[]      @relation("UserChat")
  user2       Chat[]      @relation("UserChats")
  send        Message[]
  block       BlockUser[] @relation("blocker")
  blocked     BlockUser[] @relation("blocked")
  activity    Activity[]
}

model BlockUser{
  id          String      @id @default(uuid())
  blockerId   String
  blockedId   String
  blocker     User        @relation("blocker", fields: [blockerId], references: [id])
  blocked     User        @relation("blocked", fields: [blockedId], references: [id])

  @@unique([blockedId, blockerId])
}

model Followers{
  id          String       @id @default(uuid())
  followerId  String       
  followingId String       
  followers   User         @relation("followers", fields: [followerId], references: [id])
  following   User         @relation("followings", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

model Activity{
  id          String       @id @default(uuid())
  dayCount    Int          @default(21)
  name        String
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  description String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())
  level       Level[]
}

model Level{
  id          String       @id @default(uuid())
  number      Int          
  activityId  String
  activity    Activity     @relation(fields: [activityId], references: [id], onDelete: Cascade)
  post        Post[]
}

model Post{
  id          String       @id @default(uuid())
  description String  
  imageUrl    String
  levelId     String
  level       Level        @relation(fields: [levelId], references: [id], onDelete: Cascade)
}

model Chat{
  id           String        @id @default(uuid())
  user1Id      String
  user2Id      String
  user1        User          @relation("UserChat", fields: [user1Id], references: [id])
  user2        User          @relation("UserChats", fields: [user2Id], references: [id])
  message      Message[]     
}

model Message{
  id           String        @id @default(uuid())
  chatId       String
  message      String
  senderId     String
  chat         Chat          @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender       User          @relation(fields: [senderId], references: [id])
}